@page "/update-stand/{StandId}"
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject IHttpService Http
@inject AppState AppState

<button action="action"
        onclick="window.history.go(-1); return false;"
        type="submit" class="oi oi-arrow-thick-left"
        style="background-color:var(--background); color: var(--font-color) ;width:60px; height: 30px; border: none; margin-bottom: 20px">
</button>

<div class="card">
    <h4 class="card-header" style="background-color: var(--highlight)">Update Stand</h4>
    <div class="card-body" style="background-color: var(--highlight)">
        <EditForm Model="@updateStandRequest">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Current operator: @username </label>
                <select class="form-control" name="user" @bind=@updateStandRequest.OperatorId>
                    <option value="">Select an operator</option>
                    @foreach (var user in users)
                    {
                        <option value=@user.Id>@user.Username</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Address</label>
                <InputText @bind-Value="updateStandRequest.Address" class="form-control" placeholder="Type here a new address..."/>
                <ValidationMessage For="@(() => updateStandRequest.Address)" />
            </div>
            
            @if (message != null)
            {
                @message <br />
            }
            <button type="submit" disabled="@loading" class="btn btn-primary" @onclick="OnValidSubmit">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Save
            </button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public string StandId { get; set; }
    private List<User> users = new List<User>();
    private UpdateStandRequest updateStandRequest = new UpdateStandRequest();
    private HotDogStand stand = new HotDogStand();

    private string message { get; set; }
    private bool loading { get; set; }
    private string username;

    protected override async Task OnInitializedAsync()
    {
        stand = await Http.Get<HotDogStand>($"{ApiConstants.StandsEndpoint}/{Guid.Parse(StandId)}");
        users = await Http.Get<List<User>>(ApiConstants.OperatorsEndpoint);
        username = getCurrentOperator();
        updateStandRequest.Id = Guid.Parse(StandId);
        updateStandRequest.Address = stand.Address;
    }

    public string getCurrentOperator()
    {
        foreach (User user in users)
        {
            if (stand.OperatorId == user.Id)
            {
                return user.Username;
            }
        }
        return null;
    }

    private async void OnValidSubmit()
    {
        loading = true;

        if (updateStandRequest.OperatorId == Guid.Empty)
        {
            updateStandRequest.OperatorId = stand.OperatorId;
        }

        try
        {
            await Http.Put($"{ApiConstants.StandsEndpoint}/{Guid.Parse(StandId)}", updateStandRequest);
            NavigationManager.NavigateTo(PagesConstants.StandInfo);
        }
        catch (Exception ex)
        {
            message = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
}