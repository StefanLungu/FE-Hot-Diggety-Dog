@page "/manage-inventory"
@inject NavigationManager NavigationManager
@inject IHttpService Http

<button action="action"
        onclick="window.history.go(-1); return false;"
        type="submit" class="oi oi-arrow-thick-left"
        style="background-color:var(--background); color: var(--font-color) ;width:60px; height: 30px; border: none; margin-bottom: 20px">
</button>

<h3>Inventory</h3>
<div>
    <span style="margin-right:10px">Select quantity</span>
    <input type="number" @bind="quantity" placeholder="Quantity" />

    <button type="submit" disabled="@(loading || inventoryProductsToUpdate.Count == 0)" class="btn btn-primary" style="float: right; margin-bottom: 20px;" @onclick="UpdateInventoryProducts">
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Update
    </button>
</div>
@if (message != null)
{
    @message
    <br />
}
<table class="table">
    <thead style="background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%); color:white">
        <tr>
            <th>Product</th>
            <th>Quantity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var inventoryProduct in inventoryProducts)
        {
            <tr>
                <td>@inventoryProduct.Product.Name</td>
                <td>
                    <button style="border:none; background-color:#f3f5f7;" @onclick=@(() => RemoveQuantity(@inventoryProduct.ProductId))><span class="oi oi-minus" style="color:red;"></span></button>
                    @inventoryProduct.Quantity
                    <button style="border:none; background-color:#f3f5f7;" @onclick=@(() => AddQuantity(@inventoryProduct.ProductId))><span class="oi oi-plus" style="color:green;"></span></button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<InventoryProduct> inventoryProducts = new List<InventoryProduct>();
    private List<InventoryProduct> inventoryProductsToUpdate = new List<InventoryProduct>();
    private bool loading = false;
    private string message { get; set; }
    private uint quantity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            inventoryProducts = await Http.Get<List<InventoryProduct>>(ApiConstants.InventoryProductsEndpoint);
        }
        catch (Exception ex)
        {
            message = ex.Message;
            StateHasChanged();
        }
    }

    private void RemoveQuantity(Guid productId)
    {
        if (quantity > 0)
        {
            InventoryProduct inventoryProduct = GetInventoryProduct(productId);
            if (quantity <= inventoryProduct.Quantity)
            {
                inventoryProduct.Quantity -= quantity;
                UpdateInventoryProductsToUpdate(inventoryProduct);
            }
        }
    }

    private void AddQuantity(Guid productId)
    {
        if (quantity > 0)
        {
            InventoryProduct inventoryProduct = GetInventoryProduct(productId);
            inventoryProduct.Quantity += quantity;
            UpdateInventoryProductsToUpdate(inventoryProduct);
        }
    }

    private InventoryProduct GetInventoryProduct(Guid productId)
    {
        return inventoryProducts.Find(inventoryProduct => inventoryProduct.ProductId.Equals(productId));
    }

    private void UpdateInventoryProductsToUpdate(InventoryProduct inventoryProduct)
    {
        InventoryProduct inventoryProductToUpdate = inventoryProductsToUpdate.Find(iP => iP.ProductId.Equals(inventoryProduct.ProductId));
        if (inventoryProductToUpdate == null)
        {
            inventoryProductsToUpdate.Add(new InventoryProduct{ ProductId = inventoryProduct.ProductId, Quantity = inventoryProduct.Quantity });
        }
        else
        {
            inventoryProductToUpdate.Quantity = inventoryProduct.Quantity;
        }
    }

    private async void UpdateInventoryProducts()
    {
        loading = true;
        try
        {
            await Http.Put(ApiConstants.InventoryProductsEndpoint, inventoryProductsToUpdate);
            NavigationManager.NavigateTo(PagesConstants.HomePage);
        }
        catch (Exception ex)
        {
            message = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }
}
