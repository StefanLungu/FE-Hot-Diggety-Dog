@page "/order-history/{OrderId}"
@inject IHttpService Http

@if (message != null)
{
    @message
    <br />
}
else
{
    @if (orderDetails == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <button action="action"
                onclick="window.history.go(-1); return false;"
                type="submit" class="oi oi-arrow-thick-left"
                style="background-color:var(--background); color: var(--font-color) ;width:60px; height: 30px; border: none; margin-bottom: 20px">
        </button>

        <h3>Products for order @OrderId</h3>
        <table class="table">
            <thead style="background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%); color:white">
                <tr>
                    <th>Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
               
            @foreach (var orderProduct in orderDetails.OrderProducts)
            {
                <tr>
                    <td>@orderProduct.Product.Name</td>
                    <td>@orderProduct.Quantity</td>
                    <td>@($"{orderProduct.Quantity} x {orderProduct.Product.Price}")</td>
                </tr>
            }

            </tbody>
        </table>
        <br /><br />
        <div>
            <p><b>Total:</b> @orderDetails.Total</p>
        </div>
    }
}

@code {
    [Parameter] public string OrderId { get; set; }
    private Order orderDetails;
    private string message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            orderDetails = await Http.Get<Order>($"{ApiConstants.OrdersEndpoint}/{Guid.Parse(OrderId)}");
        }
        catch (Exception ex)
        {
            message = ex.Message;
            StateHasChanged();
        }
    }
}